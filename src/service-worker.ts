/* eslint-disable @typescript-eslint/ban-ts-comment */
import { db } from './functions/db';
import { build, files, version } from '$service-worker';
import { shouldNotify } from './functions/notificationPreferences';

const worker = self as unknown as ServiceWorkerGlobalScope;
const FILES = `cache${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

worker.addEventListener('install', (event) => {
	event.waitUntil(
		caches
			.open(FILES)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				worker.skipWaiting();
			})
	);
});

worker.addEventListener('activate', (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== FILES) await caches.delete(key);
			}

			worker.clients.claim();
		})
	);
});

/**
 * fetch the asset from the network and store it in the cache.
 * fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(`offline${version}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

worker.addEventListener('fetch', (event) => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
});

const createNotification = (title: string) => {
	return worker.registration.showNotification(title);
};

async function fetchAndNotifyPackageUpdates() {
	const notificationPreferences = await db.notificationPreferences.toArray();

	const promises = notificationPreferences.map(async (notificationPreference) => {
		const { package: name, currentVersion } = notificationPreference;

		const response = await fetch(`https://registry.npmjs.org/${name}/latest`);
		const result = await response.json();

		const newVersion = result.version;

		if (currentVersion === newVersion) {
			return;
		}

		if (shouldNotify(notificationPreference, newVersion)) {
			await createNotification(`${name} v${newVersion} is now available.`);
		}

		await db.notificationPreferences.update(name, {
			currentVersion: newVersion
		});
	});

	return Promise.all(promises);
}

worker.addEventListener('periodicsync', (event) => {
	// @ts-ignore:next-line
	if (event.tag == 'notifications-background') {
		// @ts-ignore:next-line
		event.waitUntil(fetchAndNotifyPackageUpdates());
	}
});
